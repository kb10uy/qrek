//! Longitude calculation by Japan Coast Guard's approximation in 1978.
//! This script is inspired and based on `QREKI.AWK`.

use crate::astro::julian::julian_century;

/// Constants tuple for the sun longitude calculation.
/// Each iteration has form of `A * t^B * cos(C * t + D)` .
type LongitudePerturbation = (f64, f64, f64, f64);

/// Sun longitude perturbations.
pub const SUN_LOGITUDE_PERTURBATIONS: &[LongitudePerturbation] = &[
    (0.0004, 0.0, 31557.0, 161.0),
    (0.0004, 0.0, 29930.0, 48.0),
    (0.0005, 0.0, 2281.0, 221.0),
    (0.0005, 0.0, 155.0, 118.0),
    (0.0006, 0.0, 33718.0, 316.0),
    (0.0007, 0.0, 9038.0, 64.0),
    (0.0007, 0.0, 3035.0, 110.0),
    (0.0007, 0.0, 65929.0, 45.0),
    (0.0013, 0.0, 22519.0, 352.0),
    (0.0015, 0.0, 45038.0, 254.0),
    (0.0018, 0.0, 445267.0, 208.0),
    (0.0018, 0.0, 19.0, 159.0),
    (0.0020, 0.0, 32964.0, 158.0),
    (0.0200, 0.0, 71998.1, 265.1),
    (-0.0048, 1.0, 35999.05, 267.52),
    (1.9147, 0.0, 35999.05, 267.52),
];

/// Moon longitude perturbations.
pub const MOON_LOGITUDE_PERTURBATIONS: &[LongitudePerturbation] = &[
    (0.0003, 0.0, 2322131.0, 191.0),
    (0.0003, 0.0, 4067.0, 70.0),
    (0.0003, 0.0, 549197.0, 220.0),
    (0.0003, 0.0, 1808933.0, 58.0),
    (0.0003, 0.0, 349472.0, 337.0),
    (0.0003, 0.0, 381404.0, 354.0),
    (0.0003, 0.0, 958465.0, 340.0),
    (0.0004, 0.0, 12006.0, 187.0),
    (0.0004, 0.0, 39871.0, 223.0),
    (0.0005, 0.0, 509131.0, 242.0),
    (0.0005, 0.0, 1745069.0, 24.0),
    (0.0005, 0.0, 1908795.0, 90.0),
    (0.0006, 0.0, 2258267.0, 156.0),
    (0.0006, 0.0, 111869.0, 38.0),
    (0.0007, 0.0, 27864.0, 127.0),
    (0.0007, 0.0, 485333.0, 186.0),
    (0.0007, 0.0, 405201.0, 50.0),
    (0.0007, 0.0, 790672.0, 114.0),
    (0.0008, 0.0, 1403732.0, 98.0),
    (0.0009, 0.0, 858602.0, 129.0),
    (0.0011, 0.0, 1920802.0, 186.0),
    (0.0012, 0.0, 1267871.0, 249.0),
    (0.0016, 0.0, 1856938.0, 152.0),
    (0.0018, 0.0, 401329.0, 274.0),
    (0.0021, 0.0, 341337.0, 16.0),
    (0.0021, 0.0, 71998.0, 85.0),
    (0.0021, 0.0, 990397.0, 357.0),
    (0.0022, 0.0, 818536.0, 151.0),
    (0.0023, 0.0, 922466.0, 163.0),
    (0.0024, 0.0, 99863.0, 122.0),
    (0.0026, 0.0, 1379739.0, 17.0),
    (0.0027, 0.0, 918399.0, 182.0),
    (0.0028, 0.0, 1934.0, 145.0),
    (0.0037, 0.0, 541062.0, 259.0),
    (0.0038, 0.0, 1781068.0, 21.0),
    (0.0040, 0.0, 133.0, 29.0),
    (0.0040, 0.0, 1844932.0, 56.0),
    (0.0040, 0.0, 1331734.0, 283.0),
    (0.0050, 0.0, 481266.0, 205.0),
    (0.0052, 0.0, 31932.0, 107.0),
    (0.0068, 0.0, 926533.0, 323.0),
    (0.0079, 0.0, 449334.0, 188.0),
    (0.0085, 0.0, 826671.0, 111.0),
    (0.0100, 0.0, 1431597.0, 315.0),
    (0.0107, 0.0, 1303870.0, 246.0),
    (0.0110, 0.0, 489205.0, 142.0),
    (0.0125, 0.0, 1443603.0, 52.0),
    (0.0154, 0.0, 75870.0, 41.0),
    (0.0304, 0.0, 513197.9, 222.5),
    (0.0347, 0.0, 445267.1, 27.9),
    (0.0409, 0.0, 441199.8, 47.4),
    (0.0458, 0.0, 854535.2, 148.2),
    (0.0533, 0.0, 1367733.1, 280.7),
    (0.0571, 0.0, 377336.3, 13.2),
    (0.0588, 0.0, 63863.5, 124.2),
    (0.1144, 0.0, 966404.0, 276.5),
    (0.1851, 0.0, 35999.05, 87.53),
    (0.2136, 0.0, 954397.74, 179.93),
    (0.6583, 0.0, 890534.22, 145.7),
    (1.2740, 0.0, 413335.35, 10.74),
    (6.2888, 0.0, 477198.868, 44.963),
];

/// Calculates the sun longitude.
/// The returned value will be in degree.
pub fn sun_longitude(jd: f64) -> f64 {
    let jc = julian_century(jd);
    let mut th_degree = 0.0;
    for pert in SUN_LOGITUDE_PERTURBATIONS {
        let tn = if pert.1 == 0.0 { 1.0 } else { jc.powf(pert.1) };
        th_degree += pert.0 * tn * (pert.2 * jc + pert.3).to_radians().cos();
    }

    let propo_term = (36000.7695 * jc + 280.4659).rem_euclid(360.0);
    (th_degree + propo_term).rem_euclid(360.0)
}

/// Calculates the moon longitude.
/// The returned value will be in degree.
pub fn moon_longitude(jd: f64) -> f64 {
    let jc = julian_century(jd);
    let mut th_degree = 0.0;
    for pert in MOON_LOGITUDE_PERTURBATIONS.iter() {
        let tn = if pert.1 == 0.0 { 1.0 } else { jc.powf(pert.1) };
        th_degree += pert.0 * tn * (pert.2 * jc + pert.3).to_radians().cos();
    }

    let propo_term = (481267.8809 * jc) + 218.3162;
    (th_degree + propo_term).rem_euclid(360.0)
}
